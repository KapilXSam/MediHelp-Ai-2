import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ChatMessage } from '../types';
import { runChat, startNewChatSession } from '../services/geminiService';
import { BotIcon } from './icons/BotIcon';
import { UserIcon } from './icons/UserIcon';
import { SendIcon } from './icons/SendIcon';
import LoadingSpinner from './LoadingSpinner';

interface ChatWindowProps {
  onTriageComplete: (summary: string, chatHistory: ChatMessage[]) => void;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ onTriageComplete }) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [triageComplete, setTriageComplete] = useState(false);
  const [summary, setSummary] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const initializeChat = useCallback(async () => {
    startNewChatSession();
    setIsLoading(true);
    setMessages([]);
    setTriageComplete(false);
    setSummary('');

    // The initial message is now generated by the AI based on the system prompt
    const initialResponse = await runChat("Hello");
    const processedResponse = processResponse(initialResponse);
    setMessages([{ role: 'model', text: processedResponse.cleanedText }]);
    setIsLoading(false);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    initializeChat();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const processResponse = (responseText: string): { cleanedText: string; summary: string | null } => {
    const triageToken = '[TRIAGE_COMPLETE]';
    if (responseText.includes(triageToken)) {
      const parts = responseText.split(triageToken);
      const cleanedText = parts[0].trim();
      const summaryText = parts[1] ? parts[1].trim() : "Triage complete. Please see your options below.";
      return { cleanedText, summary: summaryText };
    }
    return { cleanedText: responseText, summary: null };
  };

  const handleSend = async () => {
    if (input.trim() === '' || isLoading || triageComplete) return;

    const userMessage: ChatMessage = { role: 'user', text: input };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);

    const responseText = await runChat(input);
    const { cleanedText, summary: triageSummary } = processResponse(responseText);

    const modelMessage: ChatMessage = { role: 'model', text: cleanedText };
    const finalMessages = [...newMessages, modelMessage];
    setMessages(finalMessages);
    setIsLoading(false);

    if (triageSummary) {
      setSummary(triageSummary);
      setTriageComplete(true);
    }
  };

  const handleProceed = () => {
    const finalHistory = [...messages];
    if (summary) {
        finalHistory.push({role: 'model', text: summary});
    }
    onTriageComplete(summary, finalHistory);
  }

  return (
    <div className="flex flex-col h-full bg-slate-50">
      <div className="flex-grow p-6 space-y-6 overflow-y-auto">
        {messages.map((msg, index) => (
          <div key={index} className={`flex items-start gap-4 ${msg.role === 'user' ? 'justify-end' : ''}`}>
            {msg.role === 'model' && <BotIcon />}
            <div className={`max-w-xl p-4 rounded-2xl shadow-sm ${msg.role === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-slate-800 rounded-bl-none border border-slate-200'}`}>
              <p className="whitespace-pre-wrap">{msg.text}</p>
            </div>
            {msg.role === 'user' && <UserIcon />}
          </div>
        ))}
        {isLoading && (
          <div className="flex items-start gap-4">
            <BotIcon />
            <div className="max-w-md p-4 rounded-2xl bg-white rounded-bl-none border border-slate-200">
              <LoadingSpinner />
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>
      {triageComplete ? (
        <div className="p-4 border-t border-slate-200 bg-white text-center">
            <p className="text-sm text-slate-600 mb-3">{summary}</p>
            <button
              onClick={handleProceed}
              className="flex items-center justify-center space-x-2 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-px">
              <span>View My Dashboard</span>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" /></svg>
            </button>
        </div>
      ) : (
        <div className="p-4 bg-white border-t border-slate-200">
          <div className="flex items-center bg-slate-100 rounded-lg p-2 ring-1 ring-slate-200 focus-within:ring-2 focus-within:ring-blue-500">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="Describe your symptoms..."
              className="w-full bg-transparent focus:outline-none px-2 text-slate-700"
              disabled={isLoading}
              aria-label="Chat input"
            />
            <button
              onClick={handleSend}
              disabled={isLoading || input.trim() === ''}
              className="p-2 rounded-md bg-blue-500 text-white disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors duration-200 hover:bg-blue-600"
              aria-label="Send message"
            >
              <SendIcon />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatWindow;